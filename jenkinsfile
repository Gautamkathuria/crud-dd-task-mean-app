pipeline {
    agent any

    tools {
        git 'Default'   
    }

    environment {
        DOCKERHUB_REPO = 'kathuriagautam2411'
        FRONTEND_IMAGE = 'mean-frontend'
        BACKEND_IMAGE  = 'mean-backend'
        VM_USER = 'ubuntu'
        VM_IP   = '35.154.2.193'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/Gautamkathuria/crud-dd-task-mean-app.git',
                credentialsId: 'github-cred'
            }
        }

        stage('Build Docker Images on VM') {
            steps {
                sshagent (credentials: ['aws-ssh']) { 
                    sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@35.154.2.193 '
                            cd /home/${VM_USER}/crud-dd-task-mean-app &&
                            docker build -t ${DOCKERHUB_REPO}/${FRONTEND_IMAGE}:latest frontend &&
                            docker build -t ${DOCKERHUB_REPO}/${BACKEND_IMAGE}:latest backend
                        '
                    """
                }
            }
        }

        stage('Push to Docker Hub from VM') {
            steps {
                sshagent (credentials: ['aws-ssh']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@35.154.2.193 '
                            echo "$DOCKER_HUB_PASS" | docker login -u "$DOCKER_HUB_USER" --password-stdin &&
                            docker push ${DOCKERHUB_REPO}/${FRONTEND_IMAGE}:latest &&
                            docker push ${DOCKERHUB_REPO}/${BACKEND_IMAGE}:latest
                        '
                    """
                }
            }
        }

        stage('Deploy on AWS VM') {
            steps {
                sshagent (credentials: ['aws-ssh']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@35.154.2.193 '
                            docker pull ${DOCKERHUB_REPO}/${FRONTEND_IMAGE}:latest &&
                            docker pull ${DOCKERHUB_REPO}/${BACKEND_IMAGE}:latest &&
                            docker stop frontend || true &&
                            docker rm frontend || true &&
                            docker stop backend || true &&
                            docker rm backend || true &&
                            docker run -d --name frontend -p 80:80 ${DOCKERHUB_REPO}/${FRONTEND_IMAGE}:latest &&
                            docker run -d --name backend -p 3000:3000 ${DOCKERHUB_REPO}/${BACKEND_IMAGE}:latest
                        '
                    """
                }
            }
        }
    }
}
